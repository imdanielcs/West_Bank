/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.pgy.ui;
import com.pgy.businesslogic.Cliente;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import com.pgy.dataaccess.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.time.LocalDateTime;


/**
 *
 * @author imdan
 */
public class VentanaTransferir extends javax.swing.JFrame {
//    public ArrayList<Cliente> clientes;
//    public Cliente buscarClientePorNumeroCuenta(int numeroCuenta) {
//        for (Cliente cliente : clientes) {
//            if (cliente.getCuenta().getNumero() == numeroCuenta) {
//                return cliente; 
//            }
//        }
//            JOptionPane.showMessageDialog(this, "Error: Número de cuenta no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
//            return null; 
//    }
//    public ArrayList<Cliente> getClientes() {
//        return clientes;
//    }
//
//    public void setClientes(ArrayList<Cliente> clientes) {
//        this.clientes = clientes;
//    }
    /**
     * Creates new form VentanaTransferir
     */
//    public VentanaTransferir() {
//        initComponents();
//    }
//    public VentanaTransferir(ArrayList<Cliente> clientes) {
//        initComponents();
//        this.setClientes(clientes);
//        this.setSize(600,600);
//        this.setTitle("West Bank");
//        this.setLocationRelativeTo(null);
//    }
    public Cliente cliente;
    public VentanaTransferir (Cliente cliente){
        this.cliente=cliente;
        initComponents();
        this.setSize(800,600);
        this.setTitle("West Bank");
        this.setLocationRelativeTo(null);
        mostrarCuenta();
    }
    private void mostrarCuenta () {
        String rut = this.cliente.getRut();
        Connection conexion = Conexion.obtenerConexion();
        if (conexion == null) {
            JOptionPane.showMessageDialog(this, "Error al conectar con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            // Consulta SQL para obtener los datos del cliente por su rut
            String consulta = "SELECT * FROM cliente WHERE rut = ?";
            try (PreparedStatement preparedStatement = conexion.prepareStatement(consulta)) {
                preparedStatement.setString(1, rut);
                // Ejecuto la consulta
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    // Verifico si se encontró el cliente
                    if (resultSet.next()) {
                        // Mostrar los datos en la interfaz gráfica
                        lblNumeroCuenta.setText("Este es tu número de cuenta: " + resultSet.getInt("numero"));
                    } else {
                        JOptionPane.showMessageDialog(this, "Cliente no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

        }   catch (SQLException ex) {
                    ex.printStackTrace();
        }
    }
            
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblNumeroCuenta = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCuentaOrigen = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCuentaDestino = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();
        btnTransferir = new javax.swing.JButton();
        btnInicio = new javax.swing.JButton();
        btnTransferirMenu = new javax.swing.JButton();
        btnHistorial = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblNumeroCuenta.setText("Este es tu número de cuenta:");

        jLabel2.setText("Ingrese número de cuenta origen");

        jLabel3.setText("Ingrese número de cuenta destino");

        jLabel4.setText("Ingrese monto que desea transferir");

        btnTransferir.setText("Transferir");
        btnTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferirActionPerformed(evt);
            }
        });

        btnInicio.setText("Inicio");
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        btnTransferirMenu.setText("Transferir");

        btnHistorial.setText("Historial de Transferencias");
        btnHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnInicio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTransferirMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHistorial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addGap(0, 62, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtCuentaDestino, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtCuentaOrigen, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblNumeroCuenta, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnTransferir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInicio)
                    .addComponent(btnTransferirMenu)
                    .addComponent(btnHistorial)
                    .addComponent(btnSalir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNumeroCuenta)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCuentaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCuentaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTransferir)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int transferir (int saldoOrigen, int saldoDestino, int monto){
        if (monto > 0 && monto <= saldoOrigen){
            saldoOrigen -= monto;
            saldoDestino += monto;
            JOptionPane.showMessageDialog(this, "Transferencia realizada con éxito", "Transferencia", JOptionPane.INFORMATION_MESSAGE);
            return saldoDestino;
            
        } else {
            JOptionPane.showMessageDialog(this, "Monto invalido.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return 0;
            
    }    
    private void btnTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferirActionPerformed
//        String textocuentaorigen = txtCuentaOrigen.getText();
//        String textocuentadestino = txtCuentaDestino.getText();
//        int numcuentaorigen = Integer.parseInt(textocuentaorigen);
//        int numcuentadestino = Integer.parseInt(textocuentadestino);
//        String montoTexto = txtMonto.getText();
//        int monto = Integer.parseInt(montoTexto);
//        Cliente clienteOrigen = buscarClientePorNumeroCuenta(numcuentaorigen);
//        Cliente clienteDestino = buscarClientePorNumeroCuenta(numcuentadestino);
//         if (clienteOrigen != null && clienteDestino != null) {
//            
//                if (!(clienteOrigen.getCuenta().getTipoCuenta().equals("Ahorro")) && !(clienteDestino.getCuenta().getTipoCuenta().equals("Ahorro"))) {
//                   int saldoDestino = transferir(clienteOrigen.getCuenta().getSaldo(), clienteDestino.getCuenta().getSaldo(), monto);
//                   clienteDestino.getCuenta().setSaldo(saldoDestino);
//            } else {
//            JOptionPane.showMessageDialog(this, "Al menos una de las cuentas es de ahorro, la transferencia no está permitida.", "Error de Transferencia", JOptionPane.ERROR_MESSAGE);
//            }
//        } else {
//        JOptionPane.showMessageDialog(this, "Al menos uno de los clientes no fue encontrado.", "Error de Cliente", JOptionPane.ERROR_MESSAGE);
//    }
            String cuentaOrigen = txtCuentaOrigen.getText();
            String cuentaDestino = txtCuentaDestino.getText();
            String montoTexto = txtMonto.getText();

            Connection conexion = Conexion.obtenerConexion();
            if (conexion == null) {
        JOptionPane.showMessageDialog(this, "Error al conectar con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
            }

        try {
            // Verificar si las cuentas de origen y destino existen
            if (validarExistenciaCuenta(cuentaOrigen) && validarExistenciaCuenta(cuentaDestino)) {
            int saldoOrigen = obtenerSaldoCuenta(cuentaOrigen);
            int monto = Integer.parseInt(montoTexto);
            String rut = this.cliente.getRut();
            String tipoCuenta = obtenerTipoDeCuenta(rut);
            if (!"ahorro".equals(tipoCuenta)){
                
                if (monto <= saldoOrigen) {
                
                    String consultaOrigen = "UPDATE cliente SET saldo = saldo - ? WHERE numero = ?";
                    String consultaDestino = "UPDATE cliente SET saldo = saldo + ? WHERE numero = ?";

                try (PreparedStatement statementOrigen = conexion.prepareStatement(consultaOrigen);
                    PreparedStatement statementDestino = conexion.prepareStatement(consultaDestino)) {

                    // Actualizar el saldo de la cuenta de origen
                    statementOrigen.setInt(1, monto);
                    statementOrigen.setString(2, cuentaOrigen);
                    statementOrigen.executeUpdate();

                    // Actualizar el saldo de la cuenta de destino
                    statementDestino.setInt(1, monto);
                    statementDestino.setString(2, cuentaDestino);
                    statementDestino.executeUpdate();
                    JOptionPane.showMessageDialog(this, "Transferencia realizada con éxito", "Información", JOptionPane.INFORMATION_MESSAGE);
                    String insertar = "INSERT INTO transferencia (cuenta_origen, monto, cuenta_destino, fecha_hora, rut) VALUES (?, ?, ?, ?, ?)";
                    try (PreparedStatement statement = conexion.prepareStatement(insertar)) {
                        LocalDateTime fechaHoraActual = LocalDateTime.now();
                        java.sql.Timestamp sqlFechaHoraActual = java.sql.Timestamp.valueOf(fechaHoraActual);
                        // Setear los valores para los marcadores de posición
                        statement.setString(1, cuentaOrigen);
                        statement.setInt(2, monto);
                        statement.setString(3, cuentaDestino);
                        statement.setTimestamp(4, sqlFechaHoraActual);
                        statement.setString(5, rut);
                    

                        // Ejecutar la inserción
                        int filasAfectadas = statement.executeUpdate();

                        // Verificar el resultado
                        if (filasAfectadas > 0) {
                        System.out.println("Inserción exitosa");
                        } else {
                        System.out.println("No se pudo insertar el registro");
                        }
                    }
                catch (SQLException e) {
                     e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "El monto de la transferencia es mayor al saldo disponible en la cuenta de origen.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No es posible realizar transferencias desde una cuenta de ahorro", "Error", JOptionPane.ERROR_MESSAGE);    
            }    
        } else {
        JOptionPane.showMessageDialog(this, "Una de las cuentas no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            }
    } catch (SQLException e) {
        e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al ejecutar la consulta.", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
     Conexion.cerrarConexion(conexion);
    }
        
            
    }
    
    private int obtenerSaldoCuenta(String numeroCuenta) throws SQLException {
    String consultaSaldo = "SELECT saldo FROM cliente WHERE numero = ?";
    try (Connection conexion = Conexion.obtenerConexion();
         PreparedStatement statement = conexion.prepareStatement(consultaSaldo)) {
        statement.setString(1, numeroCuenta);
        try (ResultSet resultado = statement.executeQuery()) {
            if (resultado.next()) {
                return resultado.getInt("saldo");
            }
        }
    }
    throw new SQLException("No se pudo obtener el saldo de la cuenta " + numeroCuenta);
    }
    
    
    private boolean validarExistenciaCuenta(String numero) throws SQLException {
    // Consulta SQL para verificar la existencia de una cuenta por su rut
    String consulta = "SELECT COUNT(*) AS cuenta_existe FROM cliente WHERE numero = ?";

        try (Connection conexion = Conexion.obtenerConexion();
            PreparedStatement statement = conexion.prepareStatement(consulta)) {

            statement.setString(1, numero);
            ResultSet resultSet = statement.executeQuery();

            // Verificar si se encontró la cuenta
            return resultSet.next() && resultSet.getInt("cuenta_existe") > 0;
        }
    }//GEN-LAST:event_btnTransferirActionPerformed
    private String obtenerTipoDeCuenta(String rut) throws SQLException {
        // Consulta SQL para obtener el tipo de cuenta
        String consulta = "SELECT tipo_cuenta FROM cliente WHERE rut = ?";

        try (Connection conexion = Conexion.obtenerConexion();
            PreparedStatement statement = conexion.prepareStatement(consulta)) {

            statement.setString(1, rut);
            ResultSet resultSet = statement.executeQuery();

            
            if (resultSet.next()) {
                return resultSet.getString("tipo_cuenta");
            } else {   
            return null;
            }
        }
    }
    private void btnHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistorialActionPerformed
        VentanaHistorial ventanaHistorial = new VentanaHistorial(cliente);
        ventanaHistorial.setVisible(true);
        // Cerrar la ventana
        dispose();
    }//GEN-LAST:event_btnHistorialActionPerformed

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
        VentanaPrincipal ventanaPrincipal = new VentanaPrincipal(cliente);
        ventanaPrincipal.setVisible(true);
        // Cerrar la ventana
        dispose();
    }//GEN-LAST:event_btnInicioActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
       JOptionPane.showMessageDialog(this, "Ha salido de la aplicación", "Información", JOptionPane.INFORMATION_MESSAGE);
       dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaTransferir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaTransferir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaTransferir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaTransferir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Cliente Cliente = null;
                new VentanaTransferir(Cliente).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHistorial;
    private javax.swing.JButton btnInicio;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnTransferir;
    private javax.swing.JButton btnTransferirMenu;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblNumeroCuenta;
    private javax.swing.JTextField txtCuentaDestino;
    private javax.swing.JTextField txtCuentaOrigen;
    private javax.swing.JTextField txtMonto;
    // End of variables declaration//GEN-END:variables
}
